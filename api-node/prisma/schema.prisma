// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Devices {
  id            Int               @id @default(autoincrement())
  hostname      String
  category      DeviceCategories? @relation(fields: [deviceCategoryId], references: [id])
  inventoryID   String?
  purchaseDate  DateTime?
  serviceTag    String?
  cpu           String?
  specification String?
  model         String?
  manufacturer  String?

  // NET PROPS
  ipCable     String?
  ipWireless  String?
  macCable    String?
  macWireless String?
  isSource    Boolean?

  state String?

  deviceCategoryId Int?
  UserDevice       DeviceUser[]
  DeviceAccounts   DeviceAccounts[]
}

model DeviceCategories {
  id                 Int      @id @default(autoincrement())
  title              String
  isNetDev           Boolean? @db.TinyInt
  inventoryIDPrefix  String?
  currentDevIdNumber Int?     @default(1)

  Devices Devices[]
}

model Locations {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  localArea    Locations? @relation("LocationsToLocations", fields: [locationsId], references: [id])
  isDepartment Boolean?

  DeviceUser  DeviceUser[]
  Tasks       Tasks[]
  User        Users[]
  locationsId Int?
  Locations   Locations[]  @relation("LocationsToLocations")
  Users       Users[]      @relation("user_department")
}

model Users {
  id         Int        @id @default(autoincrement())
  name       String
  username   String     @unique
  department Locations? @relation(fields: [departmentId], references: [id], name: "user_department")
  location   Locations? @relation(fields: [locationsId], references: [id])

  locationsId  Int?
  departmentId Int?
  DeviceUser   DeviceUser[]
  Tasks        Tasks[]
}

model DeviceUser {
  id       Int        @id @default(autoincrement())
  user     Users?     @relation(fields: [userId], references: [id])
  device   Devices?   @relation(fields: [devicesId], references: [id])
  location Locations? @relation(fields: [locationId], references: [id])

  locationId Int
  devicesId  Int
  userId     Int
}

model DeviceAccounts {
  id      Int      @id @default(autoincrement())
  device  Devices? @relation(fields: [devicesId], references: [id])
  account Accounts @relation(fields: [accountsId], references: [id])
  intent  String?

  devicesId  Int?
  accountsId Int
}

model Accounts {
  id              Int          @id @default(autoincrement())
  address         String
  accountType     Service?     @relation(fields: [serviceId], references: [id])
  licencePurchase DateTime?
  type            ServiceType?

  serviceId      Int?
  DeviceAccounts DeviceAccounts[]
}

model Service {
  id                   Int     @id @default(autoincrement())
  name                 String
  description          String?
  serviceControllerURL String?

  Accounts Accounts[]
}

enum ServiceType {
  DEFAULT
  LICENCED
}

// NOT IN PRODUCTION USAGE
model Tasks {
  id           Int               @id @default(autoincrement())
  subject      String
  description  String
  status       ActionStatus?     @relation(fields: [actionStatusId], references: [id])
  priority     String?
  category     ActionCategories? @relation(fields: [actionCategoriesId], references: [id])
  location     Locations?        @relation(fields: [locationsId], references: [id])
  requester    Users?            @relation(fields: [userId], references: [id])
  ticket       String?
  createdAt    DateTime          @default(now())
  lastEditedAt DateTime?         @updatedAt

  locationsId        Int
  actionCategoriesId Int
  actionStatusId     Int
  userId             Int
}

model ActionCategories {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  Tasks Tasks[]
}

model ActionStatus {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  Tasks Tasks[]
}
