// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Devices {
  id            Int               @id @default(autoincrement())
  alias         String
  category      DeviceCategories? @relation(fields: [deviceCategoryId], references: [id])
  serviceTag    String?
  cpu           String?
  specification String?

  // NET PROPS
  ipCable     String?
  ipWireless  String?
  macCable    String?
  macWireless String?
  isSource    Boolean?

  state               String?
  operationalCategory OperationalCategories? @relation(fields: [operationalCategoriesId], references: [id])

  deviceCategoryId        Int?
  operationalCategoriesId Int?
  UserDevice              DeviceUser[]
}

model DeviceCategories {
  id       Int      @id @default(autoincrement())
  title    String
  isNetDev Boolean? @db.TinyInt

  Devices Devices[]
}

model OperationalCategories {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  Devices   Devices[]
  Locations Locations[]
}

model Locations {
  id                  Int                    @id @default(autoincrement())
  title               String
  description         String?
  operationalCategory OperationalCategories? @relation(fields: [operationalCategoryId], references: [id])
  localArea           Locations?             @relation("LocationsToLocations", fields: [locationsId], references: [id])
  isDepartment        Boolean?

  DeviceUser            DeviceUser[]
  Tasks                 Tasks[]
  User                  Users[]
  operationalCategoryId Int?
  locationsId           Int?
  Locations             Locations[]  @relation("LocationsToLocations")
  Users                 Users[]      @relation("user_department")
}

model Users {
  id         Int        @id @default(autoincrement())
  name       String
  username   String     @unique
  department Locations? @relation(fields: [departmentId], references: [id], name: "user_department")
  location   Locations? @relation(fields: [locationsId], references: [id])

  locationsId  Int
  departmentId Int
  DeviceUser   DeviceUser[]
  Tasks        Tasks[]
}

model DeviceUser {
  id       Int        @id @default(autoincrement())
  user     Users?     @relation(fields: [userId], references: [id])
  device   Devices?   @relation(fields: [devicesId], references: [id])
  location Locations? @relation(fields: [locationId], references: [id])
  account  Accounts?  @relation(fields: [accountsId], references: [id])

  locationId Int
  devicesId  Int
  userId     Int
  accountsId Int?
}

model Accounts {
  id          Int          @id @default(autoincrement())
  address     String
  accountType Service_type @relation(fields: [service_typeId], references: [id])

  service_typeId Int
  DeviceUser     DeviceUser[]
}

model Service_type {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  Accounts Accounts[]
}

// NOT IN PRODUCTION USAGE
model Tasks {
  id           Int               @id @default(autoincrement())
  subject      String
  description  String
  status       ActionStatus?     @relation(fields: [actionStatusId], references: [id])
  priority     String?
  category     ActionCategories? @relation(fields: [actionCategoriesId], references: [id])
  location     Locations?        @relation(fields: [locationsId], references: [id])
  requester    Users?            @relation(fields: [userId], references: [id])
  ticket       String?
  createdAt    DateTime          @default(now())
  lastEditedAt DateTime?         @updatedAt

  locationsId        Int
  actionCategoriesId Int
  actionStatusId     Int
  userId             Int
}

model ActionCategories {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  Tasks Tasks[]
}

model ActionStatus {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  Tasks Tasks[]
}
