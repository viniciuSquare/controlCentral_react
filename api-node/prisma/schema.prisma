// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Devices {
  id                  Int                    @id @default(autoincrement())
  alias               String
  category            DeviceCategories?      @relation(fields: [deviceCategoryId], references: [id])
  specification       String?
  serviceTag          String?
  cpu                 String?
  macCable            String?
  macWireless         String?
  ipCable             String?
  ipWireless          String?
  state               String?
  isSource            Boolean?
  operationalCategory OperationalCategories? @relation(fields: [operationalCategoriesId], references: [id])

  UserDevice              DeviceUser[]
  deviceCategoryId        Int?
  operationalCategoriesId Int?
}

model DeviceCategories {
  id       Int     @id @default(autoincrement())
  title    String
  isNetDev Boolean @db.TinyInt

  Devices Devices[]
}

model OperationalCategories {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  Devices   Devices[]
  Locations Locations[]
}

model Locations {
  id                  Int                    @id @default(autoincrement())
  title               String
  description         String?
  operationalCategory OperationalCategories? @relation(fields: [operationalCategoryId], references: [id])

  DeviceUser            DeviceUser[]
  Tasks                 Tasks[]
  User                  Users[]
  operationalCategoryId Int?
}

model Users {
  id         Int       @id @default(autoincrement())
  name       String
  username   String    @unique
  department Locations @relation(fields: [locationsId], references: [id])

  locationsId Int
  DeviceUser  DeviceUser[]
  Tasks       Tasks[]
}

model DeviceUser {
  id       Int        @id @default(autoincrement())
  user     Users      @relation(fields: [userId], references: [id])
  device   Devices    @relation(fields: [devicesId], references: [id])
  location Locations? @relation(fields: [locationId], references: [id])
  account  Accounts?  @relation(fields: [accountsId], references: [id])

  locationId Int
  devicesId  Int
  userId     Int
  accountsId Int?
}

model Accounts {
  id          Int          @id @default(autoincrement())
  address     String
  accountType Service_type @relation(fields: [service_typeId], references: [id])

  service_typeId Int
  DeviceUser     DeviceUser[]
}

model Service_type {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  Accounts Accounts[]
}

// NOT IN PRODUCTION USAGE
model Tasks {
  id          Int              @id @default(autoincrement())
  subject     String
  description String
  category    ActionCategories @relation(fields: [actionCategoriesId], references: [id])
  location    Locations?       @relation(fields: [locationsId], references: [id])
  requester   Users?           @relation(fields: [userId], references: [id])
  status      ActionStatus     @relation(fields: [actionStatusId], references: [id])
  priority    String
  createdAt   DateTime
  ticket      String

  locationsId        Int
  actionCategoriesId Int
  actionStatusId     Int
  userId             Int
}

model ActionCategories {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  Tasks Tasks[]
}

model ActionStatus {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  Tasks Tasks[]
}
